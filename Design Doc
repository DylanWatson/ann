Class neuralNetwork
    functions
        bool readWeights(string fname)
            Read the data from the weights.in file and parse it into the appropriate variables
            1st two numbers determine size of matrix (X*Y)
                X = numInNodes
                Y = numOutNodes
            Malloc (new) the memory for an X*Y set of data.
            returns false if failure
        bool readInputs(string fname)
            Read the input data from the patters.in file and parse it appropriately.
                1st number = numPatterns
                2nd number = numVals
                3rd number = maxVal
            returns false if failure
        bool writeResults();
            Write the outputs from the processing elements and writes it to the files
                1st number = numPatterns
                All following = numbers produced by summation
            returns false if failure
        void createNodes();
            Based on the data from readInputs, create the number of nodes
        void sumValues();
 
    Variables
        int numInNodes
            The number of input nodes
        int numOutNodes
            The number of output nodes
        int numPatterns
            The number of patterns being tested
        int numVals
            The number of values per pattern.
        int maxVal
            The maximum value that a value can be in a pattern.

Class Node
    functions
        node(int numWeights, float *weights)
            create an array of numWeights size
            assign the value of each element to the values of the weights* array
        operator [const int x]
            returns the value of the weight for the x node
        ~node()
            delete weights array
    variables
        int numWeights
            the number of weights in the network
        float *weights
            array of float values
        float value
            stores the value of the node in case itâ€™s called later

